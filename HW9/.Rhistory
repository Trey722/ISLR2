datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
1 - accuracy
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, datatrain$Purchase, kernel = "linnear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
predictions <- predict(m3, newdata = datatest)
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
m3
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
# Between tuned and untuend linnear. Tuned wins.
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
# Between tuned and untuend linnear. Tuned wins.
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear")
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear")
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy <- confusion_matrix$overall['Accuracy']
test_error <- 1 - accuracy
test_error
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear")
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear")
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
test_error_m3f
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
test_error_m3f
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
test_error_m3f
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 2)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
test_error_m3f
# Between tuned and untuend linnear. UnTuned edges
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. UnTuned edges
View(m3f)
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10))
best_cost_m5 <- m5$best.parameters$cost
best_cost_m5 <- m54$best.parameters
best_cost_m5 <- m5$best.parameters
best_cost_m5 <- m5$best.parameters$cost
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10))
best_cost_m5 <- m5$best.parameters$cost
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5 <- m5$best.parameters$cost
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5 <- m5$best.parameters$cost
m5f <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = best_cost_m5f)
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5f <- m5$best.parameters$cost
m5f <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = best_cost_m5f)
predictions_m5f <- predict(m5f, newdata = datatest)
confusion_matrix_m5f <- confusionMatrix(predictions_m5f, datatest$Purchase)
accuracy_m5f <- confusion_matrix_m5f$overall['Accuracy']
test_error_m5f <- 1 - accuracy_m5f
test_error_m5f
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5f <- m5$best.parameters$cost
m5f <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = best_cost_m5f)
predictions_m5f <- predict(m5f, newdata = datatest)
confusion_matrix_m5f <- confusionMatrix(predictions_m5f, datatest$Purchase)
accuracy_m5f <- confusion_matrix_m5f$overall['Accuracy']
test_error_m5f <- 1 - accuracy_m5f
test_error_m5f
# Deg = 2
m6 <- svm(Purchase ~ ., data = datatrain, kernel = "polynomial", cost = 0.01, degree = 2)
predictions_m6 <- predict(m6, newdata = datatest)
confusion_matrix_m6 <- confusionMatrix(predictions_m6, datatest$Purchase)
accuracy_m6 <- confusion_matrix_m6$overall['Accuracy']
test_error_m6 <- 1 - accuracy_m6
test_error_m6
m7 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "polynomial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10), degree = 2)
best_cost_m7f <- m7$best.parameters$cost
m7 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "polynomial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10), degree = 2))
best_cost_m7f <- m7$best.parameters$cost
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5f <- m5$best.parameters$cost
m5f <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = best_cost_m5f)
predictions_m5f <- predict(m5f, newdata = datatest)
confusion_matrix_m5f <- confusionMatrix(predictions_m5f, datatest$Purchase)
accuracy_m5f <- confusion_matrix_m5f$overall['Accuracy']
test_error_m5f <- 1 - accuracy_m5f
test_error_m5f
# Deg = 2
m6 <- svm(Purchase ~ ., data = datatrain, kernel = "polynomial", cost = 0.01, degree = 2)
predictions_m6 <- predict(m6, newdata = datatest)
confusion_matrix_m6 <- confusionMatrix(predictions_m6, datatest$Purchase)
accuracy_m6 <- confusion_matrix_m6$overall['Accuracy']
test_error_m6 <- 1 - accuracy_m6
test_error_m6
m7 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "polynomial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10), degree = 2))
best_cost_m7f <- m7$best.parameters$cost
m7f <- svm(Purchase ~ ., data = datatrain, kernel = "polynomial", cost = best_cost_m7f, degree = best_degree_m7f)
data <- OJ
datatrain <- data[1:800,]
datatest <- data[800:nrow(data), ]
m2 <- svm(datatrain$Purchase ~ ., data = datatrain, kernel = "linear", cost = 0.01)
predictions <- predict(m2, newdata = datatest)
confusion_matrix <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m2 <- confusion_matrix$overall['Accuracy']
test_error_m2 <- 1 - accuracy_m2
test_error_m2
m3 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "linear", ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost <- m3$best.parameters$cost
m3f <- svm(Purchase ~ ., data = datatrain, kernel = "linear", cost = best_cost)
predictions <- predict(m3f, newdata = datatest)
confusion_matrix_m3f <- confusionMatrix(predictions, datatest$Purchase)
accuracy_m3f <- confusion_matrix_m3f$overall['Accuracy']
test_error_m3f <- 1 - accuracy_m3f
test_error_m3f
# Between tuned and untuend linnear. Tuned wins barley
m4 <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = 0.01)
predictions_m4 <- predict(m4, newdata = datatest)
confusion_matrix_m4 <- confusionMatrix(predictions_m4, datatest$Purchase)
accuracy_m4 <- confusion_matrix_m4$overall['Accuracy']
test_error_m4 <- 1 - accuracy_m4
test_error_m4
m5 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "radial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10)))
best_cost_m5f <- m5$best.parameters$cost
m5f <- svm(Purchase ~ ., data = datatrain, kernel = "radial", cost = best_cost_m5f)
predictions_m5f <- predict(m5f, newdata = datatest)
confusion_matrix_m5f <- confusionMatrix(predictions_m5f, datatest$Purchase)
accuracy_m5f <- confusion_matrix_m5f$overall['Accuracy']
test_error_m5f <- 1 - accuracy_m5f
test_error_m5f
# Deg = 2
m6 <- svm(Purchase ~ ., data = datatrain, kernel = "polynomial", cost = 0.01, degree = 2)
predictions_m6 <- predict(m6, newdata = datatest)
confusion_matrix_m6 <- confusionMatrix(predictions_m6, datatest$Purchase)
accuracy_m6 <- confusion_matrix_m6$overall['Accuracy']
test_error_m6 <- 1 - accuracy_m6
test_error_m6
m7 <- tune(svm, Purchase ~ ., data = datatrain, kernel = "polynomial",
ranges = list(cost = c(0.01, 0.1, 1, 5, 10), degree = 2))
best_cost_m7f <- m7$best.parameters$cost
m7f <- svm(Purchase ~ ., data = datatrain, kernel = "polynomial", cost = best_cost_m7f, degree = 2)
predictions_m7f <- predict(m7f, newdata = datatest)
confusion_matrix_m7f <- confusionMatrix(predictions_m7f, datatest$Purchase)
accuracy_m7f <- confusion_matrix_m7f$overall['Accuracy']
test_error_m7f <- 1 - accuracy_m7f
test_error_m7f
summary(m2)
