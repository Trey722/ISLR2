summary(gam_model)
college_data <- College
library(MASS)
library(caret)
set.seed(10)
train_index <- createDataPartition(college_data$Outstate, p = 0.8, list = FALSE)
train_set <- college_data[train_index, ]
test_set <- college_data[-train_index, ]
initial_model <- lm(Outstate ~ 1, data = train_set)
full_model <- lm(Outstate ~ ., data = train_set)
stepwise_model <- stepAIC(initial_model, scope = list(lower = initial_model, upper = full_model), direction = "forward")
summary(stepwise_model)
library(mgcv)
gam_model <- gam(Outstate ~ s(Terminal) + s(Accept) + s(Room.Board) + s(S.F.Ratio) + s(Apps) + s(Expend) + s(Personal) + s(Top10perc) + s(Private) + s(PhD), data = train_set)
college_data <- College
library(MASS)
library(caret)
set.seed(10)
train_index <- createDataPartition(college_data$Outstate, p = 0.8, list = FALSE)
train_set <- college_data[train_index, ]
test_set <- college_data[-train_index, ]
initial_model <- lm(Outstate ~ 1, data = train_set)
full_model <- lm(Outstate ~ ., data = train_set)
stepwise_model <- stepAIC(initial_model, scope = list(lower = initial_model, upper = full_model), direction = "forward")
summary(stepwise_model)
library(mgcv)
gam_model <- gam(Outstate ~ s(Terminal) + s(Accept) + s(Room.Board) + s(S.F.Ratio) + s(Apps) + s(Expend) + s(Personal) + s(Top10perc) + Private + s(PhD), data = train_set)
test_predictions <- predict(gam_model, newdata = test_set)
r_squared <- 1 - sum((test_set$Outstate - test_predictions)^2) / sum((test_set$Outstate - mean(test_set$Outstate))^2)
r_squared
summary(gam_model)
train_index <- sample(Wage, length(Wage$year) / 2)
length(Wage$year)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
library(ISLR2)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
?poly
library(ISLR2)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
d = 2
model <- poly(train_data$age, train_data$wage, degree = d)
predict(model, test_data)
library(ISLR2)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
d = 2
model <- poly(train_data$age, train_data$wage, degree = d)
predict(model, test_data)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
d <- 2
model <- lm(wage ~ poly(age, d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS <- sum((test_data$wage - predictions) ^ 2)
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum((test_data$wage - predictions) ^ 2)
}
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum((test_data$wage - predictions) ^ 2)
}
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
which.min(RSS)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(5)
for (d in 1:5)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
which.min(RSS)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(100)
for (d in 1:100)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(5)
for (d in 1:5)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
which.min(5)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
which.min(RSS)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
model <- lm(wage ~ poly(age, degree = which.min(RSS)), data = train_data)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (d in 1:10)
{
model <- lm(wage ~ poly(age, degree = d), data = train_data)
predictions <- predict(model, newdata = test_data)
RSS[d] <- sum(( test_data$wage - predictions) ^ 2)
}
model <- lm(wage ~ poly(age, degree = which.min(RSS)), data = train_data)
summary(model)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
Wage$age_cut <- cut(train_data$age, breaks = num_cuts + 1)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(20)
for (num_cuts in 1:20)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 1)
model <- glm(wage ~ age_cut, data = Wage)
sum(model$residuals^2)
RSS[num_cuts] <-  sum(model$residuals^2)
}
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(20)
for (num_cuts in 1:20)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 1)
model <- glm(wage ~ age_cut, data = Wage)
sum(model$residuals^2)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
RSS
warnings()
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 1)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 1)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
RSS
which.min(RSS)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- predict(model, newdata = test_data)
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
RSS
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
plot(glm(wage ~ which.min(RSS) + 2, data = Wage))
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
plot(glm(wage ~ RSS[which.min(RSS)] + 2, data = Wage))
plot(glm(wage ~ (RSS[which.min(RSS)] + 2), data = Wage))
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
plot(glm(wage ~ RSS[1], data = Wage))
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts + 2)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
plot(glm(wage ~ 2, data = Wage))
plot(glm(wage ~ cut(Wage$age, breaks = which.min(RSS) + 2) , data = Wage))
predictions <- suppressWarnings(predict(model, newdata = test_data))
predictions
plot(test_data$age, predictions)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) , data = Wage)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) + 2 , data = Wage)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) + 2 , data = Wage)
plot(glm(wage ~ cut(Wage$age, breaks = which.min(RSS) + 2) , data = Wage))
ylab = "Wage",
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS) + 2) , data = Wage)
plot(test_data$age, test_data$wage,
xlab = "Age",
ylab = "Wage",
main = paste("Step Function Fit (Cuts =", optimal_cuts, ")"),
pch = 16,
col = rgb(0, 0, 0, 0.5))  # Semi-transparent points
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS) + 2) , data = Wage)
plot(test_data$age, test_data$wage)
lines(test_data$age[order(test_data$age)],  predictions[order(test_data$age)],
)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts  + 1)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
which.min(RSS)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) + 1 , data = Wage)
which.min(RSS)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) + 2 , data = Wage)
which.min(RSS)
model <- glm(wage ~ cut(Wage$age, breaks = which.min(RSS)) + 1 , data = Wage)
model <- glm(wage ~ cut(Wage$age, breaks = 3, data = Wage)
plot(test_data$age, test_data$wage)
model <- glm(wage ~ cut(Wage$age, breaks = 3, data = Wage)
plot(test_data$age, test_data$wage)
model <- glm(wage ~ cut(Wage$age, breaks = 3, data = Wage)
plot(test_data$age, test_data$wage)
model <- glm(wage ~ cut(Wage$age, breaks = 3, data = Wage)
plot(test_data$age, test_data$wage)
library(ISLR2)
set.seed(10)
train_index <- sample(length(Wage$year), length(Wage$year) / 2)
train_data <- Wage[train_index, ]
test_data <- Wage[-train_index, ]
RSS <- numeric(10)
for (num_cuts in 1:10)
{
age_cut <- cut(Wage$age, breaks = num_cuts  + 1)
model <- glm(wage ~ age_cut, data = Wage)
predictions <- suppressWarnings(predict(model, newdata = test_data))
RSS[num_cuts] <-  sum((test_data$wage - predictions) ^ 2)
}
optimal_cuts <- which.min(RSS)
# Fit the model using the optimal number of cuts
model <- glm(wage ~ cut(age, breaks = optimal_cuts + 1), data = train_data)
# Make predictions on the test data
test_data$age_cut <- cut(test_data$age, breaks = optimal_cuts + 1, include.lowest = TRUE)
predictions <- predict(model, newdata = test_data)
# Basic plot of age vs. wage
plot(test_data$age, test_data$wage,
xlab = "Age",
ylab = "Wage",
main = "Wage vs. Age")
# Add the predicted values
lines(test_data$age[order(test_data$age)],
predictions[order(test_data$age)])
install.packages("keras")
library(keras)
# Function to download and unzip GTSRB
download_gtsrb <- function() {
url <- "http://benchmark.ini.rub.de/Dataset_GTSRB/Final_Training.zip"
destfile <- "GTSRB.zip"
if (!file.exists(destfile)) {
download.file(url, destfile)
}
if (!dir.exists("GTSRB")) {
unzip(destfile, exdir = "GTSRB")
}
}
# Call the function
download_gtsrb()
install.packages("keras")
library(keras)
# Function to download and unzip GTSRB
download_gtsrb <- function() {
url <- "https://www.kaggle.com/datasets/meowmeowmeowmeowmeow/gtsrb-german-traffic-sign?resource=download"
destfile <- "GTSRB.zip"
if (!file.exists(destfile)) {
download.file(url, destfile)
}
if (!dir.exists("GTSRB")) {
unzip(destfile, exdir = "GTSRB")
}
}
# Call the function
download_gtsrb()
install.packages("keras")
library(keras)
# Function to download and unzip GTSRB
download_gtsrb <- function() {
url <- "https://www.kaggle.com/datasets/meowmeowmeowmeowmeow/gtsrb-german-traffic-sign?resource=download"
destfile <- "GTSRB.zip"
if (!file.exists(destfile)) {
download.file(url, destfile)
}
if (!dir.exists("GTSRB")) {
unzip(destfile, exdir = "GTSRB")
}
}
# Call the function
download_gtsrb()
install.packages("keras")
library(keras)
# Function to download and unzip GTSRB
download_gtsrb <- function() {
url <- "https://www.kaggle.com/datasets/meowmeowmeowmeowmeow/gtsrb-german-traffic-sign?resource=download"
destfile <- "GTSRB.zip"
if (!file.exists(destfile)) {
download.file(url, destfile)
}
if (!dir.exists("GTSRB")) {
unzip(destfile, exdir = "GTSRB")
}
}
# Call the function
download_gtsrb()
library(magick)
library(magick)
library(magick)
