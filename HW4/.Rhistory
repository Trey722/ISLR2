data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
prob_assoicate_up <- 0.1
# Creates a vector that will deterime if it meets the threshold to be up
meets_prob_requirment <- (predicted_probs > prob_assoicate_up)
# Converts True -> Up and False -> down
predicted_direction <- ifelse(meets_prob_requirment, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
print(predicted_probs)
plot(predicted_probs)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
prob_assoicate_up <- 0.5
# Creates a vector that will deterime if it meets the threshold to be up
meets_prob_requirment <- (predicted_probs > prob_assoicate_up)
# Converts True -> Up and False -> down
predicted_direction <- ifelse(meets_prob_requirment, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
prob_assoicate_up <- 0.5
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
prob_assoicate_up <- 0.5
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
prob_assoicate_up <- 0.5
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 1, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 100, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model)
# Creates a vector that will deterime if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 300, "UP", "DOWN")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
print(confusion_matrix)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "UP", "DOWN")
# Create the confusion matrix
confusion_matrix <- table(Actual = Weekly$Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusi
# Load the necessary library
library(ISLR2)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "UP", "DOWN")
# Create the confusion matrix
confusion_matrix <- table(Actual = Weekly$Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusion_matrix)
# Print the confusion matrix
print(confusion_matrix)
Weekly1990_2008 <- Weekly %>% filter(Year >= 1990 & Year <= 2008)
library(dplyr)
Weekly1990_2008 <- Weekly[Weekly$Year >= 1990 & Weekly$Year <= 2008, ]
model_2 <- glm(Direction ~ Lag2 data = Weekly1990_2008, family = binomial)
model_2 <- glm(Direction ~ Lag2 data = Weekly1990_2008, family = binomial)
model_2 <- glm(Direction ~ Lag2, data = Weekly1990_2008, family = binomial)
summary(model_2)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
install.packages("MASS")
library(MASS)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
summary(LDA_mdoel)
library(MASS)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
summary(LDA_mdel)
library(MASS)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
summary(LDA_model)
Weekly2009_2010 <- Weekly[Weekly$Year >= 2009 & Weekly$Year <= 2010, ]
model_2 <- glm(Direction ~ Lag2, data = Weekly1990_2008, family = binomial)
summary(model_2)
predicted_probs <- predict(model_2, type = "response")
predicted_probs <- predict(model_2, type = "response")
print(Direction)
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
confusion_matrix <- table(Actual = Weekly$Direction, Predicted = predicted_direction)
confusion_matrix <- table(Actual = Weekly$Direction, Predicted = predicted_direction)
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Create the confusion matrix
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Create the confusion matrix
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
# Load the necessary library
library(ISLR2)
# Load the Weekly dataset
data(Weekly)
# Fit the GLM model
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Create the confusion matrix
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusion_matrix)
library(MASS)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
summary(LDA_model)
# Predict results of model 2
predicted_probs <- predict(model_2, newdata = Weekly2009_2010, type = "response")
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
confusion_matrix <- table(Actual = Weekly2009_2010, Predicted = predicted_direction)
model_2 <- glm(Direction ~ Lag2, data = Weekly1990_2008, family = binomial)
# Predict results of model 2
predicted_probs <- predict(model_2, newdata = Weekly2009_2010, type = "response")
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
confusion_matrix <- table(Actual = Weekly2009_2010, Predicted = predicted_direction)
# Filter data for 2009 to 2010
Weekly2009_2010 <- Weekly[Weekly$Year >= 2009 & Weekly$Year <= 2010, ]
# Create logistic regression model
model_2 <- glm(Direction ~ Lag2, data = Weekly1990_2008, family = binomial)
# Predict results of model 2
predicted_probs <- predict(model_2, newdata = Weekly2009_2010, type = "response")
# Classify predictions based on threshold
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Create confusion matrix using the actual values from the Weekly2009_2010 dataset
confusion_matrix <- table(Actual = Weekly2009_2010$Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusion_matrix)
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
library(MASS)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
# Make predictions (probabilities)
predicted_probs <- predict(model, type = "response")
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Create the confusion matrix
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusion_matrix)
# This creates the LDA Model and displays it
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
# Make predictions (probabilities)
predicted_probs <- predict(LDA_model, type = "response")
# Creates a vector that will determine if it meets the threshold to be up
predicted_direction <- ifelse(predicted_probs > 0.5, "Up", "Down")
# Load the MASS package
library(MASS)
# Create the LDA model
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
# Make predictions (class labels)
predicted_probs <- predict(LDA_model, newdata = Weekly2009_2010)
# Get predicted class labels
predicted_direction <- predicted_probs$class
# Create the confusion matrix using the actual values from the Weekly2009_2010 dataset
confusion_matrix <- table(Actual = Weekly2009_2010$Direction, Predicted = predicted_direction)
# Print the confusion matrix
print(confusion_matrix)
install.packages("e1071")
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 3)
library(class)
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 3)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
library(class)
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 10)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 100)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
Power <- function()
{
print(2 ^ 3)
}
Power()
Power2(2, 3)
Pwer2 <- function(x, a)
{
print(x ^ a)
}
Power2 <- function(x, a)
{
print(x ^ a)
}
Power2(2, 3)
Power <- function()
{
print(2 ^ 3)
}
Power2 <- function(x, a)
{
print(x ^ a)
}
Power()
Power2(10, 3)
Power2(8, 17)
Power2(131, 3)
Power3 <- function(x, a)
{
return(x^a)
}
plot(Power3)
plot(Power3(x, 2))
x <- seq(0, 10, by = 0.1)
plot(Power3(x, 2))
x <- seq(0, 10, by = 0.1)
plot(x, y, type = "l", main = "Plot of Power3(x, 2)", xlab = "x", ylab = "y = x^2", log = "y", col = "blue")
plot(x, Power3(x, 2), type = "l", main = "Plot of Power3(x, 2)", xlab = "x", ylab = "y = x^2", log = "y", col = "blue")
x <- seq(0, 10, by = 1)
plot(x, Power3(x, 2), type = "l", main = "Plot of Power3(x, 2)", xlab = "x", ylab = "y = x^2", log = "y", col = "blue")
x <- seq(0, 10, by = 1)
plot(x, Power3(x, 2),
xlab = "x" ylab = "x^2"
x <- seq(0, 10, by = 1)
plot(x, Power3(x, 2),
xlab = "x" ylab = "x^2"
x <- seq(0, 10, by = 1)
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
x <- seq(1, 10, by = 1)
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
Exponential <- function(a, x)
{
return(e ^ x)
}
Exponential <- function(x)
{
return(e ^ x)
}
plot(x, Exponential(x),
xlab = "x", ylab = "x^2",
log = "y")
Exponential <- function(x)
{
return(2.7 ^ x)
}
x <- seq(1, 10, by = 1)
plot(x, Exponential(x),
xlab = "x", ylab = "x^2",
log = "y")
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
x <- (1:10)
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
PlotPower <- function(range, a)
{
x <- range
plot(x, Power3(x, 2),
xlab = "x", ylab = "x^2",
log = "y")
}
PlotPower(1:10, 3)
knitr::opts_chunk$set(echo = TRUE)
# Prepare the training and test data
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 3)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
# Prepare the training and test data
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 3)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
knitr::opts_chunk$set(echo = TRUE)
library(ISLR2)
attach(Weekly)
boxplot(Today ~ Direction,
xlab = "Direction", ylab = "Today",
main = "Boxplot of Today by Direction")
#This plot tells us that if today is extermly postive or extermly neagtive then the weekly will direction will likely pull in the direction. The usefulness of this is questioanble though as if the market goes down by 10% on Monday, then it will be very unlikely that it will be up 11.1111% required to be up by Friday so the usefulness of this predicatior is uknown.
model <- glm(Direction ~ Today + Lag1 + Lag2 + Volume, data = Weekly, family = binomial)
summary(model)
# None of these seem to be statistically significant
predicted_probs <- predict(model, type = "response")
prob_assoicate_up <- 0.5
# Creates a vector that will deterime if it meets the threshold to be up
meets_prob_requirment <- (predicted_probs > prob_assoicate_up)
# Converts True -> Up and False -> down
predicted_direction <- ifelse(meets_prob_requirment, "Up", "Down")
confusion_matrix <- table(Actual = Direction, Predicted = predicted_direction)
confusion_matrix
# The confusion matrix is indicating nothing to be about the types of mistakes as its apperantly gettting everything correct
### Model LOG
# Filter data for 1990 to 2008
Weekly1990_2008 <- Weekly[Weekly$Year >= 1990 & Weekly$Year <= 2008, ]
# Filter data for 2009 to 2010
Weekly2009_2010 <- Weekly[Weekly$Year >= 2009 & Weekly$Year <= 2010, ]
# Create logistic regression model
model_2 <- glm(Direction ~ Lag2, data = Weekly1990_2008, family = binomial)
# Predict results of model 2
predicted_probs <- predict(model_2, newdata = Weekly2009_2010, type = "response")
# Classify predictions based on threshold
threshold_model_2 <- 0.5
predicted_direction <- ifelse(predicted_probs > threshold_model_2, "Up", "Down")
# Create confusion matrix using the actual values from the Weekly2009_2010 dataset
confusion_matrix <- table(Actual = Weekly2009_2010$Direction, Predicted = predicted_direction)
# Print the confusion matrix
confusion_matrix
### Model LDA
# Load the MASS package
library(MASS)
# Create the LDA model
LDA_model <- lda(Direction ~ Lag2, data = Weekly1990_2008)
# Make predictions (class labels)
predicted_probs <- predict(LDA_model, newdata = Weekly2009_2010)
# Get predicted class labels
predicted_direction_LDA <- predicted_probs$class
# Create the confusion matrix using the actual values from the Weekly2009_2010 dataset
confusion_matrix_LDA <- table(Actual = Weekly2009_2010$Direction, Predicted = predicted_direction_LDA)
# Print the confusion matrix
confusion_matrix_LDA
### Model QDA
# Create the QDA model
QDA_model <- qda(Direction ~ Lag2, data = Weekly1990_2008)
# Make predictions (class labels)
predicted_probs <- predict(QDA_model, newdata = Weekly2009_2010)
# Get predicted class labels
predicted_direction_QDA <- predicted_probs$class
# Create the confusion matrix using the actual values from the Weekly2009_2010 dataset
confusion_matrix_QDA <- table(Actual = Weekly2009_2010$Direction, Predicted = predicted_direction_QDA)
# Print the confusion matrix
confusion_matrix_QDA
### Model KNN with k = 1
# Load the class package
library(class)
# Prepare the training and test data
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Separate predictors and response for training
train_x <- as.matrix(train_data[, "Lag2"])  # Convert to matrix
train_y <- train_data$Direction
# Separate predictors for testing
test_x <- as.matrix(test_data[, "Lag2"])  # Convert to matrix
# Perform k-NN with k = 1
predicted_direction_KNN <- knn(train = train_x, test = test_x, cl = train_y, k = 1)
# Create the confusion matrix
confusion_matrix_KNN <- table(Actual = test_data$Direction, Predicted = predicted_direction_KNN)
# Print the confusion matrix
confusion_matrix_KNN
### Naive Bayes
library(e1071)
# Prepare the training and test data
train_data <- Weekly1990_2008
test_data <- Weekly2009_2010
# Fit the Naive Bayes model
naive_bayes_model <- naiveBayes(Direction ~ Lag2, data = train_data)
# Make predictions on the test data
predicted_direction_Bayes <- predict(naive_bayes_model, newdata = test_data)
# Create the confusion matrix
confusion_matrix_Bayes <- table(Actual = test_data$Direction, Predicted = predicted_direction_Bayes)
# Print the confusion matrix
confusion_matrix_Bayes
